{"ast":null,"code":"import _createForOfIteratorHelper from\"J:/ali/Sabzlearn/frontend/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";import rules from\"./rules\";import regex from\"./regex\";var Validator=function Validator(value,validation){var validationResult=[];var _iterator=_createForOfIteratorHelper(validation),_step;try{for(_iterator.s();!(_step=_iterator.n()).done;){var validator=_step.value;if(validator.value===rules.requiredValue){value.trim().length===0&&validationResult.push(false);}if(validator.value===rules.minValue){value.trim().length<validator.min&&validationResult.push(false);}if(validator.value===rules.maxValue){value.trim().length>validator.max&&validationResult.push(false);}if(validator.value===rules.emailValue){!regex.testEmail(value)&&validationResult.push(false);}if(validator.value===rules.numberValue){!regex.testPhoneNumber(value)&&validationResult.push(false);}}}catch(err){_iterator.e(err);}finally{_iterator.f();}if(validationResult.length){return false;}else{return true;}};export default Validator;","map":{"version":3,"names":["rules","regex","Validator","value","validation","validationResult","_iterator","_createForOfIteratorHelper","_step","s","n","done","validator","requiredValue","trim","length","push","minValue","min","maxValue","max","emailValue","testEmail","numberValue","testPhoneNumber","err","e","f"],"sources":["J:/ali/Sabzlearn/frontend/src/Validator/Validator.jsx"],"sourcesContent":["import rules from \"./rules\";\r\nimport regex from \"./regex\";\r\nconst Validator = (value, validation) => {\r\n  let validationResult = [];\r\n  for (const validator of validation) {\r\n    if (validator.value === rules.requiredValue) {\r\n      value.trim().length === 0 && validationResult.push(false);\r\n    }\r\n    if (validator.value === rules.minValue) {\r\n      value.trim().length < validator.min && validationResult.push(false);\r\n    }\r\n    if (validator.value === rules.maxValue) {\r\n      value.trim().length > validator.max && validationResult.push(false);\r\n    }\r\n    if (validator.value === rules.emailValue) {\r\n      !regex.testEmail(value) && validationResult.push(false);\r\n    }\r\n    if (validator.value === rules.numberValue) {\r\n      !regex.testPhoneNumber(value) && validationResult.push(false);\r\n    }\r\n  }\r\n  if (validationResult.length) {\r\n    return false;\r\n  } else {\r\n    return true;\r\n  }\r\n};\r\nexport default Validator;\r\n"],"mappings":"uIAAA,MAAO,CAAAA,KAAK,KAAM,SAAS,CAC3B,MAAO,CAAAC,KAAK,KAAM,SAAS,CAC3B,GAAM,CAAAC,SAAS,CAAG,QAAZ,CAAAA,SAASA,CAAIC,KAAK,CAAEC,UAAU,CAAK,CACvC,GAAI,CAAAC,gBAAgB,CAAG,EAAE,CAAC,IAAAC,SAAA,CAAAC,0BAAA,CACFH,UAAU,EAAAI,KAAA,KAAlC,IAAAF,SAAA,CAAAG,CAAA,KAAAD,KAAA,CAAAF,SAAA,CAAAI,CAAA,IAAAC,IAAA,EAAoC,IAAzB,CAAAC,SAAS,CAAAJ,KAAA,CAAAL,KAAA,CAClB,GAAIS,SAAS,CAACT,KAAK,GAAKH,KAAK,CAACa,aAAa,CAAE,CAC3CV,KAAK,CAACW,IAAI,CAAC,CAAC,CAACC,MAAM,GAAK,CAAC,EAAIV,gBAAgB,CAACW,IAAI,CAAC,KAAK,CAAC,CAC3D,CACA,GAAIJ,SAAS,CAACT,KAAK,GAAKH,KAAK,CAACiB,QAAQ,CAAE,CACtCd,KAAK,CAACW,IAAI,CAAC,CAAC,CAACC,MAAM,CAAGH,SAAS,CAACM,GAAG,EAAIb,gBAAgB,CAACW,IAAI,CAAC,KAAK,CAAC,CACrE,CACA,GAAIJ,SAAS,CAACT,KAAK,GAAKH,KAAK,CAACmB,QAAQ,CAAE,CACtChB,KAAK,CAACW,IAAI,CAAC,CAAC,CAACC,MAAM,CAAGH,SAAS,CAACQ,GAAG,EAAIf,gBAAgB,CAACW,IAAI,CAAC,KAAK,CAAC,CACrE,CACA,GAAIJ,SAAS,CAACT,KAAK,GAAKH,KAAK,CAACqB,UAAU,CAAE,CACxC,CAACpB,KAAK,CAACqB,SAAS,CAACnB,KAAK,CAAC,EAAIE,gBAAgB,CAACW,IAAI,CAAC,KAAK,CAAC,CACzD,CACA,GAAIJ,SAAS,CAACT,KAAK,GAAKH,KAAK,CAACuB,WAAW,CAAE,CACzC,CAACtB,KAAK,CAACuB,eAAe,CAACrB,KAAK,CAAC,EAAIE,gBAAgB,CAACW,IAAI,CAAC,KAAK,CAAC,CAC/D,CACF,CAAC,OAAAS,GAAA,EAAAnB,SAAA,CAAAoB,CAAA,CAAAD,GAAA,WAAAnB,SAAA,CAAAqB,CAAA,IACD,GAAItB,gBAAgB,CAACU,MAAM,CAAE,CAC3B,MAAO,MAAK,CACd,CAAC,IAAM,CACL,MAAO,KAAI,CACb,CACF,CAAC,CACD,cAAe,CAAAb,SAAS"},"metadata":{},"sourceType":"module","externalDependencies":[]}